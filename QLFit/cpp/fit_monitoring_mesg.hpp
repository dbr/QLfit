////////////////////////////////////////////////////////////////////////////////
// The following FIT Protocol software provided may be used with FIT protocol
// devices only and remains the copyrighted property of Dynastream Innovations Inc.
// The software is being provided on an "as-is" basis and as an accommodation,
// and therefore all warranties, representations, or guarantees of any kind
// (whether express, implied or statutory) including, without limitation,
// warranties of merchantability, non-infringement, or fitness for a particular
// purpose, are specifically disclaimed.
//
// Copyright 2008 Dynastream Innovations Inc.
////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 3.10Release
// Tag = $Name: AKW3_100 $
////////////////////////////////////////////////////////////////////////////////


#if !defined(FIT_MONITORING_MESG_HPP)
#define FIT_MONITORING_MESG_HPP

#include "fit_mesg.hpp"

namespace fit
{

class MonitoringMesg : public Mesg
{
   public:
      MonitoringMesg(void) : Mesg(Profile::MESG_MONITORING)
      {
      }

      MonitoringMesg(const Mesg &mesg) : Mesg(mesg)
      {
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns timestamp field
      // Units: s
      // Comment: Must align to logging interval, for example, time must be 00:00:00 for daily log.
      ///////////////////////////////////////////////////////////////////////
      FIT_DATE_TIME GetTimestamp(void) const
      {
         return GetFieldUINT32Value(253, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set timestamp field
      // Units: s
      // Comment: Must align to logging interval, for example, time must be 00:00:00 for daily log.
      ///////////////////////////////////////////////////////////////////////
      void SetTimestamp(FIT_DATE_TIME timestamp)
      {
         SetFieldUINT32Value(253, timestamp, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns device_index field
      // Comment: Associates this data to device_info message.  Not required for file with single device (sensor).
      ///////////////////////////////////////////////////////////////////////
      FIT_DEVICE_INDEX GetDeviceIndex(void) const
      {
         return GetFieldUINT8Value(0, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set device_index field
      // Comment: Associates this data to device_info message.  Not required for file with single device (sensor).
      ///////////////////////////////////////////////////////////////////////
      void SetDeviceIndex(FIT_DEVICE_INDEX deviceIndex)
      {
         SetFieldUINT8Value(0, deviceIndex, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns calories field
      // Units: kcal
      ///////////////////////////////////////////////////////////////////////
      FIT_UINT16 GetCalories(void) const
      {
         return GetFieldUINT16Value(1, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set calories field
      // Units: kcal
      ///////////////////////////////////////////////////////////////////////
      void SetCalories(FIT_UINT16 calories)
      {
         SetFieldUINT16Value(1, calories, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns distance field
      // Units: m
      ///////////////////////////////////////////////////////////////////////
      FIT_FLOAT32 GetDistance(void) const
      {
         return GetFieldFLOAT32Value(2, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set distance field
      // Units: m
      ///////////////////////////////////////////////////////////////////////
      void SetDistance(FIT_FLOAT32 distance)
      {
         SetFieldFLOAT32Value(2, distance, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns cycles field
      // Units: cycles
      ///////////////////////////////////////////////////////////////////////
      FIT_UINT32 GetCycles(void) const
      {
         return GetFieldUINT32Value(3, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set cycles field
      // Units: cycles
      ///////////////////////////////////////////////////////////////////////
      void SetCycles(FIT_UINT32 cycles)
      {
         SetFieldUINT32Value(3, cycles, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns active_time field
      // Units: s
      ///////////////////////////////////////////////////////////////////////
      FIT_FLOAT32 GetActiveTime(void) const
      {
         return GetFieldFLOAT32Value(4, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set active_time field
      // Units: s
      ///////////////////////////////////////////////////////////////////////
      void SetActiveTime(FIT_FLOAT32 activeTime)
      {
         SetFieldFLOAT32Value(4, activeTime, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns activity_type field
      ///////////////////////////////////////////////////////////////////////
      FIT_ACTIVITY_TYPE GetActivityType(void) const
      {
         return GetFieldENUMValue(5, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set activity_type field
      ///////////////////////////////////////////////////////////////////////
      void SetActivityType(FIT_ACTIVITY_TYPE activityType)
      {
         SetFieldENUMValue(5, activityType, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns activity_subtype field
      ///////////////////////////////////////////////////////////////////////
      FIT_ACTIVITY_SUBTYPE GetActivitySubtype(void) const
      {
         return GetFieldENUMValue(6, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set activity_subtype field
      ///////////////////////////////////////////////////////////////////////
      void SetActivitySubtype(FIT_ACTIVITY_SUBTYPE activitySubtype)
      {
         SetFieldENUMValue(6, activitySubtype, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns compressed_distance field
      // Units: m
      ///////////////////////////////////////////////////////////////////////
      FIT_FLOAT32 GetCompressedDistance(void) const
      {
         return GetFieldFLOAT32Value(8, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set compressed_distance field
      // Units: m
      ///////////////////////////////////////////////////////////////////////
      void SetCompressedDistance(FIT_FLOAT32 compressedDistance)
      {
         SetFieldFLOAT32Value(8, compressedDistance, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns compressed_cycles field
      // Units: cycles
      ///////////////////////////////////////////////////////////////////////
      FIT_UINT16 GetCompressedCycles(void) const
      {
         return GetFieldUINT16Value(9, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set compressed_cycles field
      // Units: cycles
      ///////////////////////////////////////////////////////////////////////
      void SetCompressedCycles(FIT_UINT16 compressedCycles)
      {
         SetFieldUINT16Value(9, compressedCycles, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns compressed_active_time field
      // Units: s
      ///////////////////////////////////////////////////////////////////////
      FIT_UINT16 GetCompressedActiveTime(void) const
      {
         return GetFieldUINT16Value(10, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set compressed_active_time field
      // Units: s
      ///////////////////////////////////////////////////////////////////////
      void SetCompressedActiveTime(FIT_UINT16 compressedActiveTime)
      {
         SetFieldUINT16Value(10, compressedActiveTime, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns local_timestamp field
      // Comment: Must align to logging interval, for example, time must be 00:00:00 for daily log.
      ///////////////////////////////////////////////////////////////////////
      FIT_LOCAL_DATE_TIME GetLocalTimestamp(void) const
      {
         return GetFieldUINT32Value(11, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set local_timestamp field
      // Comment: Must align to logging interval, for example, time must be 00:00:00 for daily log.
      ///////////////////////////////////////////////////////////////////////
      void SetLocalTimestamp(FIT_LOCAL_DATE_TIME localTimestamp)
      {
         SetFieldUINT32Value(11, localTimestamp, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
      }

};

} // namespace fit

#endif // !defined(FIT_MONITORING_MESG_HPP)
