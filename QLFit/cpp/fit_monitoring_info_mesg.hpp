////////////////////////////////////////////////////////////////////////////////
// The following FIT Protocol software provided may be used with FIT protocol
// devices only and remains the copyrighted property of Dynastream Innovations Inc.
// The software is being provided on an "as-is" basis and as an accommodation,
// and therefore all warranties, representations, or guarantees of any kind
// (whether express, implied or statutory) including, without limitation,
// warranties of merchantability, non-infringement, or fitness for a particular
// purpose, are specifically disclaimed.
//
// Copyright 2008 Dynastream Innovations Inc.
////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 3.10Release
// Tag = $Name: AKW3_100 $
////////////////////////////////////////////////////////////////////////////////


#if !defined(FIT_MONITORING_INFO_MESG_HPP)
#define FIT_MONITORING_INFO_MESG_HPP

#include "fit_mesg.hpp"

namespace fit
{

class MonitoringInfoMesg : public Mesg
{
   public:
      MonitoringInfoMesg(void) : Mesg(Profile::MESG_MONITORING_INFO)
      {
      }

      MonitoringInfoMesg(const Mesg &mesg) : Mesg(mesg)
      {
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns timestamp field
      ///////////////////////////////////////////////////////////////////////
      FIT_DATE_TIME GetTimestamp(void) const
      {
         return GetFieldUINT32Value(253, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set timestamp field
      ///////////////////////////////////////////////////////////////////////
      void SetTimestamp(FIT_DATE_TIME timestamp)
      {
         SetFieldUINT32Value(253, timestamp, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns local_timestamp field
      // Comment: Use to convert activity timestamps to local time if device does not support time zone and daylight savings time correction.
      ///////////////////////////////////////////////////////////////////////
      FIT_LOCAL_DATE_TIME GetLocalTimestamp(void) const
      {
         return GetFieldUINT32Value(0, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set local_timestamp field
      // Comment: Use to convert activity timestamps to local time if device does not support time zone and daylight savings time correction.
      ///////////////////////////////////////////////////////////////////////
      void SetLocalTimestamp(FIT_LOCAL_DATE_TIME localTimestamp)
      {
         SetFieldUINT32Value(0, localTimestamp, 0, FIT_SUBFIELD_INDEX_MAIN_FIELD);
      }

};

} // namespace fit

#endif // !defined(FIT_MONITORING_INFO_MESG_HPP)
